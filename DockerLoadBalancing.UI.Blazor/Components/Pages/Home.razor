@page "/"
@using DockerLoadBalancing.Domain
@using DockerLoadBalancing.UI.Blazor.Components.Dialogs
@inject HttpClient client
@inject IConfiguration conf
@inject ISnackbar snack
@inject IDialogService dialog

<MudDataGrid T="Person" Items="items" Class="w-100" >
    <ToolBarContent>
        <MudButton OnClick="AddPerson" Variant="Variant.Filled" Class="mr-3">Add new</MudButton>
        <MudButton OnClick="GetData" Variant="Variant.Filled">Refresh data</MudButton>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Id"/>
        <PropertyColumn Property="x => x.Name"/>
        <PropertyColumn Property="x => x.SecondName"/>
        <PropertyColumn Property="x => x.City"/>
        <PropertyColumn Property="x => x.Address"/>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Person"/>
    </PagerContent>
</MudDataGrid>


@code{
    List<Person> items = new();
    async Task AddPerson()
    {
        var dialogOptions = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true };
        var dial = await dialog.ShowAsync<NewPersonDialog>("",dialogOptions);
        var res = await dial.Result;

        if(!res.Canceled)
        {
            try
            {
                var apiUrl = conf.GetValue<string>("APILink");
                var apiRes = await client.PostAsJsonAsync(apiUrl, res.Data);
                if (apiRes.IsSuccessStatusCode) 
                {
                    snack.Add($"Uploaded new person {(res.Data as Person)!.Name}.", Severity.Success);
                    GetData();
                }
                else snack.Add("Error when uploading new person.", Severity.Error);
            }
            catch (Exception ex)
            {
                snack.Add("Error when uploading new person.", Severity.Error);
            }
        }
    }

    async Task GetData()
    {
        var apiUrl = conf.GetValue<string>("APILink");
        var apiRes = await client.GetFromJsonAsync<List<Person>>(apiUrl,CancellationToken.None);
        if (apiRes is not null) items = apiRes;
        else snack.Add("Error with downloading data.",Severity.Error);
    }
}